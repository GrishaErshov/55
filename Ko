import android.content.res.AssetFileDescriptor;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import java.io.IOException;

public class MediaPlayerActivity extends AppCompatActivity {

    private MediaPlayer mediaPlayer;
    private boolean isPaused = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mediaPlayer = new MediaPlayer();
        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);

        Button playButton = findViewById(R.id.play_button);
        playButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mediaPlayer.isPlaying()) {
                    pauseAudio();
                } else if (isPaused) {
                    resumeAudio();
                } else {
                    playAudioFromAssets("sample_audio.mp3");
                }
            }
        });

        Button rewindButton = findViewById(R.id.rewind_button);
        rewindButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mediaPlayer.seekTo(0);
            }
        });

        Button forwardButton = findViewById(R.id.forward_button);
        forwardButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                int duration = mediaPlayer.getDuration();
                int currentPosition = mediaPlayer.getCurrentPosition();
                int forwardTime = 10000; // 10 seconds forward
                int newTime = currentPosition + forwardTime;
                if (newTime < duration) {
                    mediaPlayer.seekTo(newTime);
                }
            }
        });
    }

    private void playAudioFromAssets(String filename) {
        try {
            AssetFileDescriptor afd = getAssets().openFd(filename);
            mediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
            mediaPlayer.prepare();
            mediaPlayer.start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void pauseAudio() {
        if (mediaPlayer.isPlaying()) {
            mediaPlayer.pause();
            isPaused = true;
        }
    }

    private void resumeAudio() {
        if (isPaused) {
            mediaPlayer.start();
            isPaused = false;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }
}





////////
private static char[][] board = new char[3][3];
private static char currentPlayer = 'X';
private static int moveCounter = 0;

public static void main(String[] args) {
    initializeBoard();
    printBoard();
    
    while (true) {
        makeMove();
        printBoard();
        
        if (checkWin()) {
            System.out.println("Player " + currentPlayer + " wins!");
            break;
        }
        
        if (moveCounter == 9) {
            System.out.println("It's a tie!");
            break;
        }
        
        changePlayer();
    }
}

public static void initializeBoard() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = '-';
        }
    }
}

public static void printBoard() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            System.out.print(board[i][j] + " ");
        }
        System.out.println();
    }
}

public static void makeMove() {
    Scanner scanner = new Scanner(System.in);
    System.out.println("Player " + currentPlayer + ", enter row (0-2) and column (0-2) to make your move:");
    int row = scanner.nextInt();
    int col = scanner.nextInt();
    
    if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != '-') {
        System.out.println("Invalid move. Try again.");
        makeMove();
    } else {
        board[row][col] = currentPlayer;
        moveCounter++;
    }
}

public static boolean checkWin() {
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
            return true;
        }
        if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) {
            return true;
        }
    }
    
    if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) {
        return true;
    }
    if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) {
        return true;
    }
    
    return false;
}

public static void changePlayer() {
    if (currentPlayer == 'X') {
        currentPlayer = 'O';
    } else {
        currentPlayer = 'X';
    }
}










//////////
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/green"
    tools:context=".MainActivity">
    <!--title text-->
    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="23dp"
        android:text="GFG Tic Tac Toe"
        android:textSize="45sp"
        android:textStyle="bold"
        app:fontFamily="cursive"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" />
 
    <!--image of the grid-->
    <ImageView
        android:id="@+id/imageView"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:contentDescription="Start"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/textView"
        app:srcCompat="@drawable/grid" />
 
    <LinearLayout
        android:id="@+id/linearLayout"
        android:layout_width="0dp"
        android:layout_height="420dp"
        android:orientation="vertical"
        app:layout_constraintBottom_toBottomOf="@+id/imageView"
        app:layout_constraintEnd_toEndOf="@+id/imageView"
        app:layout_constraintStart_toStartOf="@+id/imageView"
        app:layout_constraintTop_toTopOf="@+id/imageView">
 
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:orientation="horizontal">
 
            <!--images of the grid boxes-->
            <ImageView
                android:id="@+id/imageView0"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="0" />

            <!--images of the grid boxes-->
            <ImageView
                android:id="@+id/imageView0"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="0" />
 
            <ImageView
                android:id="@+id/imageView1"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="1" />
 
            <ImageView
                android:id="@+id/imageView2"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="2" />
        </LinearLayout>
 
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:orientation="horizontal">
 
            <ImageView
                android:id="@+id/imageView3"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="3" />
 
            <ImageView
                android:id="@+id/imageView4"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="4" />
 
            <ImageView
                android:id="@+id/imageView5"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="5" />
        </LinearLayout>
 
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:orientation="horizontal">
 
            <ImageView
                android:id="@+id/imageView6"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="6" />
        <ImageView
                android:id="@+id/imageView7"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="7" />
 
            <ImageView
                android:id="@+id/imageView8"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
                android:onClick="playerTap"
                android:padding="20sp"
                android:tag="8" />
        </LinearLayout>
 
    </LinearLayout>
 
    <!--game status text display-->
    <TextView
        android:id="@+id/status"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginBottom="15sp"
        android:text="Status"
        android:textSize="28sp"
        android:textStyle="italic"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/linearLayout" />
 
</androidx.constraintlayout.widget.ConstraintLayout>

////////
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
 
import androidx.appcompat.app.AppCompatActivity;
 
public class MainActivity extends AppCompatActivity {
    boolean gameActive = true;
     
    // Player representation
    // 0 - X
    // 1 - O
    int activePlayer = 0;
    int[] gameState = {2, 2, 2, 2, 2, 2, 2, 2, 2};
     
    // State meanings:
    //    0 - X
    //    1 - O
    //    2 - Null
    // put all win positions in a 2D array
    int[][] winPositions = {{0, 1, 2}, {3, 4, 5}, {6, 7, 8},
            {0, 3, 6}, {1, 4, 7}, {2, 5, 8},
            {0, 4, 8}, {2, 4, 6}};
    public static int counter = 0;
 
    // this function will be called every time a 
    // players tap in an empty box of the grid
    public void playerTap(View view) {
        ImageView img = (ImageView) view;
        int tappedImage = Integer.parseInt(img.getTag().toString());
         
        // game reset function will be called 
        // if someone wins or the boxes are full
        if (!gameActive) {
            gameReset(view);
            //Reset the counter
            counter = 0;
        }
         
        // if the tapped image is empty
        if (gameState[tappedImage] == 2) {
            // increase the counter 
            // after every tap
            counter++;
             
            // check if its the last box
            if (counter == 9) {
                // reset the game
                gameActive = false;
            }
             
            // mark this position
            gameState[tappedImage] = activePlayer;
             
            // this will give a motion 
            // effect to the image
            img.setTranslationY(-1000f);
             
            // change the active player 
            // from 0 to 1 or 1 to 0
            if (activePlayer == 0) {
                // set the image of x
                img.setImageResource(R.drawable.x);
                activePlayer = 1;
                TextView status = findViewById(R.id.status);
                 
                // change the status
                status.setText("O's Turn - Tap to play");
            } else {
                // set the image of o
                img.setImageResource(R.drawable.o);
                activePlayer = 0;
                TextView status = findViewById(R.id.status);
                 
                // change the status
                status.setText("X's Turn - Tap to play");
            }
            img.animate().translationYBy(1000f).setDuration(300);
        }
        int flag = 0;
        // Check if any player has won if counter is > 4 as min 5 taps are 
        // required to declare a winner
        if (counter > 4) {
          for (int[] winPosition : winPositions) {
              if (gameState[winPosition[0]] == gameState[winPosition[1]] &&
                      gameState[winPosition[1]] == gameState[winPosition[2]] &&
                      gameState[winPosition[0]] != 2) {
                  flag = 1;
 
                  // Somebody has won! - Find out who!
                  String winnerStr;
 
                  // game reset function be called
                  gameActive = false;
                  if (gameState[winPosition[0]] == 0) {
                      winnerStr = "X has won";
                  } else {
                      winnerStr = "O has won";
                  }
                  // Update the status bar for winner announcement
                  TextView status = findViewById(R.id.status);
                  status.setText(winnerStr);
              }
          }
          // set the status if the match draw
          if (counter == 9 && flag == 0) {
              TextView status = findViewById(R.id.status);
              status.setText("Match Draw");
          }
        }
    }
   // reset the game
    public void gameReset(View view) {
        gameActive = true;
        activePlayer = 0;
        //set all position to Null 
        Arrays.fill(gameState, 2);
        // remove all the images from the boxes inside the grid
        ((ImageView) findViewById(R.id.imageView0)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView1)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView2)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView3)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView4)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView5)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView6)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView7)).setImageResource(0);
        ((ImageView) findViewById(R.id.imageView8)).setImageResource(0);
 
        TextView status = findViewById(R.id.status);
        status.setText("X's Turn - Tap to play");
    }
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}


//////////////////////////
public Plane(int id, String name, int yearProd) {
    this.id = id;
    this.name = name;
    this.yearProd = yearProd;
}

@Override
public String toString() {
    return "Plane{" +
            "id=" + id +
            ", name='" + name + '\'' +
            ", yearProd=" + yearProd +
            '}';
}
    while (planes.size() < 100) {
        int id = planes.size() + 1;
        System.out.print("Enter name of the plane: ");
        String name = scanner.nextLine();
        System.out.print("Enter year of production of the plane: ");
        int yearProd = Integer.parseInt(scanner.nextLine());

        planes.add(new Plane(id, name, yearProd));
    }

    int option = 0;
    do {
        System.out.println("Menu:");
        System.out.println("1) Serted name");
        System.out.println("2) Serted yearProd");
        System.out.println("3) Filter name");
        System.out.println("4) Filter yearProd");
        System.out.println("5) Filter by year production count");

        System.out.print("Enter option: ");
        option = Integer.parseInt(scanner.nextLine());

        switch (option) {
            case 1:
                System.out.print("Enter name to search: ");
                String name = scanner.nextLine();
                for (Plane plane : planes) {
                    if (plane.name.equals(name)) {
                        System.out.println(plane);
                    }
                }
                break;
            case 2:
                System.out.print("Enter year of production to search: ");
                int yearProd = Integer.parseInt(scanner.nextLine());
                for (Plane plane : planes) {
                    if (plane.yearProd == yearProd) {
                        System.out.println(plane);
                    }
                }
                break;
            case 3:
                System.out.print("Enter name to filter: ");
                String filterName = scanner.nextLine();
                planes.stream()
                      .filter(plane -> plane.name.equals(filterName))
                      .forEach(System.out::println);
                break;
            case 4:
                System.out.print("Enter year of production to filter: ");
                int filterYear = Integer.parseInt(scanner.nextLine());
                planes.stream()
                      .filter(plane -> plane.yearProd == filterYear)
                      .forEach(System.out::println);
                break;
            case 5:
                System.out.print("Enter year of production to count: ");
                int countYear = Integer.parseInt(scanner.nextLine());
                long count = planes.stream()
                                   .filter(plane -> plane.yearProd == countYear)
                                   .count();
                System.out.println("Count of planes with year of production " + countYear + ": " + count);
                break;
            default:
                System.out.println("Invalid option");
        }
    } while (option != 0);
}







////////////////

public Plane(int id, String name, int yearProd) {
    this.id = id;
    this.name = name;
    this.yearProd = yearProd;
}

public String getName() {
    return name;
}

public int getYearProd() {
    return yearProd;
}

@Override
public String toString() {
    return "Plane{" +
            "id=" + id +
            ", name='" + name + '\'' +
            ", yearProd=" + yearProd +
            '}';
}
    // Добавляем 100 экземпляров Plane в HashSet
    for (int i = 1; i <= 100; i++) {
        planes.add(new Plane(i, "Plane" + i, 2000 + i));
    }

    Scanner scanner = new Scanner(System.in);

    System.out.println("Меню:");
    System.out.println("1) Введите имя, чтобы вывести на экран");
    System.out.println("2) Введите год производства, чтобы вывести на экран");
    System.out.println("3) Введите название, чтобы отфильтровать и вывести на экран");
    System.out.println("4) Введите год производства, чтобы отфильтровать и вывести на экран");
    System.out.println("5) Введите год производства, чтобы посчитать и вывести количество");

    int choice = scanner.nextInt();

    switch (choice) {
        case 1:
            System.out.println("Введите имя:");
            String inputName = scanner.next();
            for (Plane plane : planes) {
                if (plane.getName().equals(inputName)) {
                    System.out.println(plane);
                }
            }
            break;
        case 2:
            System.out.println("Введите год производства:");
            int inputYear = scanner.nextInt();
            for (Plane plane : planes) {
                if (plane.getYearProd() == inputYear) {
                    System.out.println(plane);
                }
            }
            break;
        case 3:
            System.out.println("Введите название для фильтрации:");
            String nameFilter = scanner.next();
            planes.stream()
                    .filter(plane -> plane.getName().contains(nameFilter))
                    .forEach(System.out::println);
            break;
        case 4:
            System.out.println("Введите год производства для фильтрации:");
            int yearFilter = scanner.nextInt();
            planes.stream()
                    .filter(plane -> plane.getYearProd() == yearFilter)
                    .forEach(System.out::println);
            break;
        case 5:
            System.out.println("Введите год производства для подсчета количества:");
            int yearCount = scanner.nextInt();
            long count = planes.stream()
                    .filter(plane -> plane.getYearProd() == yearCount)
                    .count();
            System.out.println("Количество самолетов с годом производства " + yearCount + ": " + count);
            break;
        default:
            System.out.println("Некорректный ввод");
    }
}














////////////////

import java.util.ArrayList;
import java.util.Scanner;
import java.time.Instant;

class Plant {
    private int id;
    private String name;
    private String description;
    private int harvestTime;

    public Plant(int id, String name, String description, int harvestTime) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.harvestTime = harvestTime;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public int getHarvestTime() {
        return harvestTime;
    }

    public void setHarvestTime(int harvestTime) {
        this.harvestTime = harvestTime;
    }
}

public class GardenApp {
    public static void main(String[] args) {
        ArrayList<Plant> garden = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Садовод Меню:");
            System.out.println("1. Просмотр рассады");
            System.out.println("2. Добавить растение");
            System.out.println("3. Выход из программы");
            System.out.print("Выберите действие: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("Список рассады:");
                    for (Plant plant : garden) {
                        System.out.println("ID: " + plant.getId() + ", Имя: " + plant.getName() + ", Описание: " + plant.getDescription() + ", Время сбора урожая: " + plant.getHarvestTime() + " дней");
                    }
                    break;
                case 2:
                    System.out.print("Введите ID растения: ");
                    int id = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Введите имя растения: ");
                    String name = scanner.nextLine();
                    System.out.print("Введите описание растения: ");
                    String description = scanner.nextLine();
                    System.out.print("Введите время сбора урожая (в днях): ");
                    int harvestTime = scanner.nextInt();
                    garden.add(new Plant(id, name, description, harvestTime));
                    System.out.println("Растение успешно добавлено в рассаду.");
                    break;
                case 3:
                    System.out.println("Выход из программы.");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Некорректный выбор, попробуйте снова.");
            }
        }
    }

    public long calculateDeltaTime(int harvestTime) {
        long currentTime = Instant.now().toEpochMilli();
        long harvestTimeInMillis = harvestTime * 24 * 60 * 60 * 1000;
        return harvestTimeInMillis - currentTime;
    }
}





////////////////

break;
                case 3:
                    System.out.println("Выход из программы.");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Некорректный выбор, попробуйте снова.");
            }
        }
    }

    public long calculateDeltaTime(int harvestTime) {
        long currentTime = Instant.now().toEpochMilli();
        long harvestTimeInMillis = harvestTime * 24 * 60 * 60 * 1000;
        return harvestTimeInMillis - currentTime;
    }
}





/////////////
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Plant {
    private int id;
    private String name;
    private String description;
    private String harvestTime;

    public Plant(int id, String name, String description, String harvestTime) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.harvestTime = harvestTime;
    }

    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Description: " + description + ", Harvest Time: " + harvestTime;
    }
}

public class GardenApp {
    static List<Plant> plants = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Menu:");
            System.out.println("1. View Plants");
            System.out.println("2. Add Plant");
            System.out.println("3. Exit");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewPlants();
                    break;
                case 2:
                    addPlant();
                    break;
                case 3:
                    System.out.println("Exiting program...");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    public static void viewPlants() {
        if (plants.size() == 0) {
            System.out.println("No plants in the garden.");
        } else {
            System.out.println("Plants in the garden:");
            for (Plant plant : plants) {
                System.out.println(plant);
            }
        }
    }

    public static void addPlant() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter ID for the plant:");
        int id = scanner.nextInt();

        System.out.println("Enter name of the plant:");
        String name = scanner.next();

        System.out.println("Enter description of the plant:");
        String description = scanner.next();

        System.out.println("Enter harvest time for the plant:");
        String harvestTime = scanner.next();

        Plant newPlant = new Plant(id, name, description, harvestTime);
        plants.add(newPlant);

        System.out.println("Plant added successfully.");
    }
}




///////////////////////
import java.util.ArrayList;
import java.util.List;

class Food {
    private int id;
    private String name;
    private String description;

    public Food(int id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    // getters and setters
}

public class Main {
    public static void main(String[] args) {
        List<Food> foods = new ArrayList<>();

        // Добавление 100000 сущностей
        for (int i = 0; i < 100000; i++) {
            foods.add(new Food(i, "Food" + i, "Description" + i));
        }

        // Добавление 1 элемента в начало
        foods.add(0, new Food(100001, "New Food at Beginning", "New Description at Beginning"));

        // Добавление 1 элемента в середину
        foods.add(foods.size() / 2, new Food(100002, "New Food at Middle", "New Description at Middle"));

        // Добавление 1 элемента в конец
        foods.add(new Food(100003, "New Food at End", "New Description at End"));

        // Удаление 1 элемента
        foods.remove(foods.size() / 2);

        // Модификация 1 элемента в начале
        Food foodAtBeginning = foods.get(0);
        foodAtBeginning.setName("Modified Name at Beginning");
        foodAtBeginning.setDescription("Modified Description at Beginning");

        // Модификация 1 элемента в середине
        Food foodAtMiddle = foods.get(foods.size() / 2);
        foodAtMiddle.setName("Modified Name at Middle");
        foodAtMiddle.setDescription("Modified Description at Middle");

        // Модификация 1 элемента в конце
        Food foodAtEnd = foods.get(foods.size() - 1);
        foodAtEnd.setName("Modified Name at End");
        foodAtEnd.setDescription("Modified Description at End");

        // Вывод элементов
        for (Food food : foods) {
            System.out.println("Id: " + food.getId() + ", Name: " + food.getName() + ", Description: " + food.getDescription());
        }
    }
}
